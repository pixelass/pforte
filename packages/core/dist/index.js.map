{"mappings":"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","sources":["packages/core/src/index.ts","packages/core/src/csrf-token.ts"],"sourcesContent":["import process from \"node:process\";\n\nimport {\n\tAUTH_CSRF_COOKIE,\n\tAUTH_SESSION_COOKIE,\n\tCALLBACK_PATH,\n\tDEFAULT_MAX_AGE,\n} from \"@pforte/constants\";\nimport { getExpirationDate } from \"@pforte/utils\";\nimport { serialize } from \"cookie\";\nimport { nanoid } from \"nanoid\";\n\nimport createCSRFToken from \"./csrf-token\";\n\nexport function setCookie(response, cookie) {\n\t// Preserve any existing cookies that have already been set in the same session\n\tlet setCookieHeader = response.getHeader(\"Set-Cookie\") ?? [];\n\t// If not an array (i.e. a string with a single cookie) convert to array\n\tif (!Array.isArray(setCookieHeader)) {\n\t\tsetCookieHeader = [setCookieHeader];\n\t}\n\tconst { name, value, options } = cookie;\n\tconst cookieHeader = serialize(name, value, options);\n\n\tsetCookieHeader.push(cookieHeader);\n\tresponse.setHeader(\"Set-Cookie\", setCookieHeader);\n}\n\nexport function extendHandler({ request, response, maxAge }) {\n\tconst cookies = Object.entries(request.cookies).map(([name, value]) => ({\n\t\tname,\n\t\tvalue,\n\t\toptions: {},\n\t}));\n\tconst sessionToken = nanoid();\n\tconst csrfToken = createCSRFToken({\n\t\toptions: { secret: process.env.PFORTE_SECRET || \"pforte-secret\" },\n\t\tisPost: false,\n\t});\n\tconst expires = getExpirationDate(maxAge);\n\tcookies.push({\n\t\tname: AUTH_SESSION_COOKIE,\n\t\tvalue: sessionToken,\n\t\toptions: {\n\t\t\tpath: \"/\",\n\t\t\texpires,\n\t\t},\n\t});\n\tcookies.push({\n\t\tname: AUTH_CSRF_COOKIE,\n\t\tvalue: csrfToken.cookie,\n\t\toptions: {\n\t\t\tpath: \"/\",\n\t\t\texpires,\n\t\t},\n\t});\n\tcookies.forEach(cookie => setCookie(response, cookie));\n\treturn { sessionToken, csrfToken, expires };\n}\n\nexport async function handleSession({ request }, adapter) {\n\tif (adapter) {\n\t\tconst { sessionToken, csrfToken } = request.body;\n\t\tconst [bodyValue] = csrfToken.split(\"|\");\n\t\tconst { csrfTokenVerified } = createCSRFToken({\n\t\t\toptions: { secret: process.env.PFORTE_SECRET || \"pforte-secret\" },\n\t\t\tisPost: true,\n\t\t\tcookieValue: csrfToken,\n\t\t\tbodyValue,\n\t\t});\n\n\t\treturn csrfTokenVerified ? await adapter(\"session\", { sessionToken, csrfToken }) : null;\n\t} else {\n\t\treturn null;\n\t}\n}\n\nexport function handleSignOut({ response }) {\n\tsetCookie(response, {\n\t\tname: AUTH_SESSION_COOKIE,\n\t\tvalue: \"\",\n\t\toptions: {\n\t\t\tpath: \"/\",\n\t\t\texpires: getExpirationDate(0),\n\t\t},\n\t});\n\tsetCookie(response, {\n\t\tname: AUTH_CSRF_COOKIE,\n\t\tvalue: \"\",\n\t\toptions: {\n\t\t\tpath: \"/\",\n\t\t\texpires: getExpirationDate(0),\n\t\t},\n\t});\n}\n\nexport default function pforte({ adapter, providers, maxAge = DEFAULT_MAX_AGE }) {\n\tconst host = process.env.PFORTE_URL || process.env.VERCEL_URL || \"http://localhost:3000\";\n\tconst callbackPath = [host, CALLBACK_PATH].join(\"/\");\n\n\treturn async function pforteHandler(request, response) {\n\t\tconst { query } = request;\n\t\tswitch (query.pforte) {\n\t\t\tcase \"session\":\n\t\t\t\tawait handleSession({ request }, adapter).then(user => {\n\t\t\t\t\tresponse.status(200).json({\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\tdata: user\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tuser: {\n\t\t\t\t\t\t\t\t\t\tid: user._id,\n\t\t\t\t\t\t\t\t\t\tname: user.name,\n\t\t\t\t\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\t\t\t\t\timage: user.image,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: null,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"signin\":\n\t\t\t\tresponse.status(200).json({\n\t\t\t\t\turl: providers.find(provider_ => provider_.name === query.provider).url,\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"signout\":\n\t\t\t\thandleSignOut({ response });\n\t\t\t\tresponse.status(302).setHeader(\"Location\", callbackPath).end();\n\t\t\t\tbreak;\n\t\t\tcase \"callback\":\n\t\t\t\tresponse.status(302).setHeader(\"Location\", host).end();\n\t\t\t\tbreak;\n\t\t\tcase \"github\":\n\t\t\t\ttry {\n\t\t\t\t\tconst provider = providers.find(provider_ => provider_.name === \"github\");\n\t\t\t\t\tawait provider\n\t\t\t\t\t\t.connect({ request })\n\t\t\t\t\t\t.then(({ user, accessToken }) => {\n\t\t\t\t\t\t\tif (adapter) {\n\t\t\t\t\t\t\t\tconst { sessionToken, csrfToken } = extendHandler({\n\t\t\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\t\t\tmaxAge,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn adapter(\"user\", {\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\taccessToken,\n\t\t\t\t\t\t\t\t\tsessionToken,\n\t\t\t\t\t\t\t\t\tcsrfToken,\n\t\t\t\t\t\t\t\t\tmaxAge,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tresponse.status(302).setHeader(\"Location\", callbackPath).end();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tresponse.status(error.response.status).send(error.message);\n\t\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(error);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tresponse.status(404).send(\"Not Found\");\n\t\t\t\tbreak;\n\t\t}\n\t};\n}\n","import { createHash, randomBytes } from \"node:crypto\";\n\ninterface CreateCSRFTokenParams {\n\toptions: {\n\t\tsecret: string;\n\t};\n\tcookieValue?: string;\n\tisPost: boolean;\n\tbodyValue?: string;\n}\n\n/**\n * Ensure CSRF Token cookie is set for any subsequent requests.\n * Used as part of the strategy for mitigation for CSRF tokens.\n *\n * Creates a cookie like 'next-auth.csrf-token' with the value 'token|hash',\n * where 'token' is the CSRF token and 'hash' is a hash made of the token and\n * the secret, and the two values are joined by a pipe '|'. By storing the\n * value and the hash of the value (with the secret used as a salt) we can\n * verify the cookie was set by the server and not by a malicous attacker.\n *\n * For more details, see the following OWASP links:\n * https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie\n * https://owasp.org/www-chapter-london/assets/slides/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf\n */\nexport default function createCSRFToken({\n\toptions,\n\tcookieValue,\n\tisPost,\n\tbodyValue,\n}: CreateCSRFTokenParams) {\n\tif (cookieValue) {\n\t\tconst [csrfToken, csrfTokenHash] = cookieValue.split(\"|\");\n\t\tconst expectedCsrfTokenHash = createHash(\"sha256\")\n\t\t\t.update(`${csrfToken}${options.secret}`)\n\t\t\t.digest(\"hex\");\n\t\tif (csrfTokenHash === expectedCsrfTokenHash) {\n\t\t\t// If hash matches then we trust the CSRF token value\n\t\t\t// If this is a POST request and the CSRF Token in the POST request matches\n\t\t\t// the cookie we have already verified is the one we have set, then the token is verified!\n\t\t\tconst csrfTokenVerified = isPost && csrfToken === bodyValue;\n\n\t\t\treturn { csrfTokenVerified, csrfToken };\n\t\t}\n\t}\n\n\t// New CSRF token\n\tconst csrfToken = randomBytes(32).toString(\"hex\");\n\tconst csrfTokenHash = createHash(\"sha256\")\n\t\t.update(`${csrfToken}${options.secret}`)\n\t\t.digest(\"hex\");\n\tconst cookie = `${csrfToken}|${csrfTokenHash}`;\n\n\treturn { cookie, csrfToken };\n}\n"],"names":[],"version":3,"file":"index.js.map"}