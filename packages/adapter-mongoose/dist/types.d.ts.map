{"mappings":"AC0GA,wCAAwC,OAAO,KAAA;;;;;;;;;;;;GAgB9C","sources":["packages/adapter-mongoose/src/src/models.ts","packages/adapter-mongoose/src/src/index.ts","packages/adapter-mongoose/src/index.ts"],"sourcesContent":[null,null,"import process from \"node:process\";\n\nimport { getExpirationDate } from \"@pforte/utils\";\n\nimport { Account, Session, User } from \"./models\";\n\nasync function getUser({ user, accessToken, sessionToken, maxAge }) {\n\t// Check for an existing account\n\tconst existingAccount = await Account.findOne({\n\t\tproviderAccountId: user.id,\n\t});\n\t// Create an expiration date for sessions\n\tconst expires = getExpirationDate(maxAge);\n\n\t// When an account exists\n\tif (existingAccount) {\n\t\t// Then find the user\n\t\tconst existingUser = await User.findById(existingAccount.userId);\n\n\t\t// When a user exists\n\t\tif (existingUser) {\n\t\t\t// Then find existing sessions\n\t\t\tconst existingSessions = await Session.find({\n\t\t\t\tuserId: existingUser._id,\n\t\t\t});\n\t\t\t// And delete all of them\n\t\t\tawait Promise.all(\n\t\t\t\texistingSessions.map(\n\t\t\t\t\tasync session_ => await Session.findByIdAndDelete(session_._id)\n\t\t\t\t)\n\t\t\t);\n\t\t\t// Then create a new session\n\t\t\tawait Session.create({\n\t\t\t\tsessionToken,\n\t\t\t\tuserId: existingUser._id,\n\t\t\t\texpires,\n\t\t\t});\n\n\t\t\t// And return the existing user\n\t\t\treturn {\n\t\t\t\tuser: {\n\t\t\t\t\t// Normalize the key for id:\n\t\t\t\t\t// _id -> id\n\t\t\t\t\tid: existingUser._id,\n\t\t\t\t\tname: existingUser.name,\n\t\t\t\t\temail: existingUser.email,\n\t\t\t\t\timage: existingUser.image,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\t// Else create a new user\n\tconst newUser = await User.create({\n\t\tname: user.name,\n\t\temail: user.email,\n\t\timage: user.avatar_url,\n\t});\n\t// And create a new account\n\tawait Account.create({\n\t\tproviderAccountId: user.id,\n\t\tprovider: \"github\",\n\t\ttype: \"oauth\",\n\t\taccess_token: accessToken.access_token,\n\t\texpires_at: accessToken.expires_at,\n\t\trefresh_token: accessToken.refresh_token,\n\t\trefresh_token_expires_in: accessToken.refresh_token_expires_in,\n\t\ttoken_type: accessToken.token_type,\n\t\tscope: accessToken.scope,\n\t\tuserId: newUser._id,\n\t});\n\t// And create a new session\n\tawait Session.create({\n\t\tsessionToken,\n\t\tuserId: newUser._id,\n\t\texpires,\n\t});\n\n\t// And return the new user\n\treturn {\n\t\tuser: {\n\t\t\tid: newUser._id,\n\t\t\tname: newUser.name,\n\t\t\temail: newUser.email,\n\t\t\timage: newUser.image,\n\t\t},\n\t};\n}\n\nasync function getSession({ sessionToken }) {\n\tconst existingSession = await Session.findOne({\n\t\tsessionToken,\n\t});\n\tif (existingSession) {\n\t\tconst existingUser = await User.findById(existingSession.userId);\n\t\treturn {\n\t\t\tid: existingUser._id,\n\t\t\tname: existingUser.name,\n\t\t\temail: existingUser.email,\n\t\t\timage: existingUser.image,\n\t\t};\n\t} else {\n\t\treturn null;\n\t}\n}\n\nexport default function mongooseAdapter(connect) {\n\treturn async function adapter(type, payload) {\n\t\tawait connect();\n\t\tswitch (type) {\n\t\t\tcase \"user\":\n\t\t\t\t// Payload:\n\t\t\t\t// { user, accessToken, sessionToken, maxAge }\n\t\t\t\treturn getUser(payload);\n\t\t\tcase \"session\":\n\t\t\t\t// Payload:\n\t\t\t\t// { sessionToken }\n\t\t\t\treturn getSession(payload);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}