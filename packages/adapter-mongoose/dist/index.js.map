{"mappings":"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","sources":["packages/adapter-mongoose/src/index.ts","packages/adapter-mongoose/src/models.ts"],"sourcesContent":["import process from \"node:process\";\n\nimport { getExpirationDate } from \"@pforte/utils\";\n\nimport { Account, Session, User } from \"./models\";\n\nasync function getUser({ user, accessToken, sessionToken, maxAge }) {\n\t// Check for an existing account\n\tconst existingAccount = await Account.findOne({\n\t\tproviderAccountId: user.id,\n\t});\n\t// Create an expiration date for sessions\n\tconst expires = getExpirationDate(maxAge);\n\n\t// When an account exists\n\tif (existingAccount) {\n\t\t// Then find the user\n\t\tconst existingUser = await User.findById(existingAccount.userId);\n\n\t\t// When a user exists\n\t\tif (existingUser) {\n\t\t\t// Then find existing sessions\n\t\t\tconst existingSessions = await Session.find({\n\t\t\t\tuserId: existingUser._id,\n\t\t\t});\n\t\t\t// And delete all of them\n\t\t\tawait Promise.all(\n\t\t\t\texistingSessions.map(\n\t\t\t\t\tasync session_ => await Session.findByIdAndDelete(session_._id)\n\t\t\t\t)\n\t\t\t);\n\t\t\t// Then create a new session\n\t\t\tawait Session.create({\n\t\t\t\tsessionToken,\n\t\t\t\tuserId: existingUser._id,\n\t\t\t\texpires,\n\t\t\t});\n\n\t\t\t// And return the existing user\n\t\t\treturn {\n\t\t\t\tuser: {\n\t\t\t\t\t// Normalize the key for id:\n\t\t\t\t\t// _id -> id\n\t\t\t\t\tid: existingUser._id,\n\t\t\t\t\tname: existingUser.name,\n\t\t\t\t\temail: existingUser.email,\n\t\t\t\t\timage: existingUser.image,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t}\n\n\t// Else create a new user\n\tconst newUser = await User.create({\n\t\tname: user.name,\n\t\temail: user.email,\n\t\timage: user.avatar_url,\n\t});\n\t// And create a new account\n\tawait Account.create({\n\t\tproviderAccountId: user.id,\n\t\tprovider: \"github\",\n\t\ttype: \"oauth\",\n\t\taccess_token: accessToken.access_token,\n\t\texpires_at: accessToken.expires_at,\n\t\trefresh_token: accessToken.refresh_token,\n\t\trefresh_token_expires_in: accessToken.refresh_token_expires_in,\n\t\ttoken_type: accessToken.token_type,\n\t\tscope: accessToken.scope,\n\t\tuserId: newUser._id,\n\t});\n\t// And create a new session\n\tawait Session.create({\n\t\tsessionToken,\n\t\tuserId: newUser._id,\n\t\texpires,\n\t});\n\n\t// And return the new user\n\treturn {\n\t\tuser: {\n\t\t\tid: newUser._id,\n\t\t\tname: newUser.name,\n\t\t\temail: newUser.email,\n\t\t\timage: newUser.image,\n\t\t},\n\t};\n}\n\nasync function getSession({ sessionToken }) {\n\tconst existingSession = await Session.findOne({\n\t\tsessionToken,\n\t});\n\tif (existingSession) {\n\t\tconst existingUser = await User.findById(existingSession.userId);\n\t\treturn {\n\t\t\tid: existingUser._id,\n\t\t\tname: existingUser.name,\n\t\t\temail: existingUser.email,\n\t\t\timage: existingUser.image,\n\t\t};\n\t} else {\n\t\treturn null;\n\t}\n}\n\nexport default function mongooseAdapter(connect) {\n\treturn async function adapter(type, payload) {\n\t\tawait connect();\n\t\tswitch (type) {\n\t\t\tcase \"user\":\n\t\t\t\t// Payload:\n\t\t\t\t// { user, accessToken, sessionToken, maxAge }\n\t\t\t\treturn getUser(payload);\n\t\t\tcase \"session\":\n\t\t\t\t// Payload:\n\t\t\t\t// { sessionToken }\n\t\t\t\treturn getSession(payload);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n}\n","import {ObjectId} from 'mongodb';\nimport mongoose from 'mongoose';\n\nconst UserSchema = new mongoose.Schema({\n\tname: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\temail: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n\timage: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n});\n\nexport const User = mongoose.models.User || mongoose.model('User', UserSchema);\n\nconst SessionSchema = new mongoose.Schema({\n\tsessionToken: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\tuserId: {\n\t\ttype: ObjectId,\n\t\trequired: false,\n\t},\n\texpires: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n});\n\nexport const Session = mongoose.models.Session || mongoose.model('Session', SessionSchema);\n\nconst AccountSchema = new mongoose.Schema({\n\tprovider: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\ttype: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\tproviderAccountId: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\tuserId: {\n\t\ttype: String,\n\t\trequired: true,\n\t},\n\taccess_token: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n\texpires_at: {\n\t\ttype: Date,\n\t\trequired: false,\n\t},\n\trefresh_token: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n\trefresh_token_expires_in: {\n\t\ttype: Number,\n\t\trequired: false,\n\t},\n\ttoken_type: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n\tscope: {\n\t\ttype: String,\n\t\trequired: false,\n\t},\n});\n\nexport const Account = mongoose.models.Account || mongoose.model('Account', AccountSchema);\n"],"names":[],"version":3,"file":"index.js.map"}